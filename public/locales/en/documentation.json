{
  "title": "Documentation",
  "overview": {
    "title": "Overview",
    "description": "Vaultic Crypto Engine is a high-performance cryptographic library designed for modern web applications. It leverages the power of WebAssembly to provide efficient and secure cryptographic operations directly in the browser."
  },
  "sidebar": {
    "introduction": "INTRODUCTION",
    "guides": "GUIDES",
    "gettingStarted": "Getting Started",
    "installation": "Installation",
    "usage": "Usage",
    "api": "API",
    "security": "Security",
    "search": "Search...",
    "searchAria": "Search in documentation",
    "noResults": "No results found"
  },
  "codeExample": {
    "copied": "Code copied to clipboard!",
    "logCopied": "Example code copied to clipboard",
    "hide": "Hide",
    "show": "Show"
  },
  "cargoToml": {
    "logCopied": "Cargo.toml code copied to clipboard"
  },
  "installation": {
    "title": "Installation",
    "intro": "Getting started with Vaultic is a breeze! You can use it in both Rust applications and JavaScript via WebAssembly.",
    "javascript": "JavaScript / TypeScript",
    "using": "Install using your favorite package manager:",
    "rust": "Rust",
    "addCargo": "Add Vaultic to your Cargo.toml:",
    "wasmSupport": "WebAssembly Support",
    "wasmFeature": "For WebAssembly support, enable the wasm feature:",
    "buildingWasm": "Building for WebAssembly",
    "buildWasmInstructions": "To build the WebAssembly module for use in JavaScript:",
    "buildCommand": "Build Command",
    "importInstructions": "Then you can import and use it in your JavaScript/TypeScript project:",
    "javascriptImport": "JavaScript Import",
    "typescriptNote": "To use with TypeScript, no additional configuration is required. The types are included in the package.",
    "logCopied": "Install command copied to clipboard"
  },
  "gettingStarted": {
    "title": "Getting Started",
    "welcome": "Welcome to Vaultic Crypto Engine! This library is designed to make cryptography simple, safe, and fast for everyone. Whether you're building a web app, a backend service, or experimenting with cryptography, Vaultic gives you secure RSA operations with zero hassle—powered by Rust and ready for JavaScript and WebAssembly.",
    "capabilities": {
      "title": "What can you do with Vaultic?",
      "generate": "Generate RSA key pairs (2048-bit, secure by default)",
      "encrypt": "Encrypt and decrypt data with RSA-PKCS#1",
      "protect": "Protect against timing attacks and common vulnerabilities",
      "encode": "Encode and decode with Base64 for easy sharing",
      "use": "Use in browsers (WebAssembly) or Node.js—no limits",
      "handle": "Handle any data size automatically"
    },
    "securityNotice": {
      "title": "Security Notice",
      "content": "Vaultic uses a pure Rust RSA implementation with extra protections against the Marvin Attack (RUSTSEC-2023-0071). For highly sensitive projects, we recommend using a library with constant-time guarantees like aws-lc-rs."
    }
  },
  "usage": {
    "title": "Usage",
    "intro": "Vaultic is designed to be intuitive and developer-friendly. Here are some real-world examples to help you get started quickly with key generation, encryption, and decryption.",
    "keyGeneration": {
      "title": "Key Generation",
      "description": "Generate a secure RSA key pair in just one line:",
      "exampleTitle": "Key Generation Example"
    },
    "encryption": {
      "title": "Encryption",
      "description": "Encrypt any message using your public key - hybrid encryption is automatic:",
      "exampleTitle": "Encryption Example"
    },
    "decryption": {
      "title": "Decryption",
      "description": "Decrypt messages using your private key - format detection is automatic:",
      "exampleTitle": "Decryption Example"
    },
    "keyProtection": {
      "title": "Key Pair Protection",
      "description": "Protect your key pair with a password:",
      "exampleTitle": "Key Protection Example"
    },
    "messageProtection": {
      "title": "Message Protection",
      "description": "Encrypt messages with password-based protection:",
      "exampleTitle": "Message Protection Example"
    }
  },
  "api": {
    "title": "API Reference",
    "intro": "Here you'll find everything you need to use Vaultic's cryptography features in your app. Each function is designed to be simple, safe, and easy to use—no cryptography PhD required!",
    "example": "Example",
    "type": "Type",
    "mainTypes": "Main Types",
    "types": "Types",
    "errorHandling": "Error Handling",
    "errorHandlingExample": "Error Handling Example",
    "sections": {
      "generate_rsa_keypair_pem": {
        "description": "Generate a secure RSA key pair (2048-bit). Returns an object with your public and private keys as PEM strings."
      },
      "rsa_encrypt_base64": {
        "description": "Encrypt any string using an RSA public key. The result is a base64-encoded string, ready to share or store."
      },
      "rsa_decrypt_base64": {
        "description": "Decrypt a base64-encoded string using your RSA private key. Returns the original message."
      }
    }
  },
  "security": {
    "title": "Security",
    "intro": "Security is at the heart of Vaultic. Here's how we keep your data safe, and what you should know to use cryptography responsibly.",
    "protection": {
      "title": "How Vaultic protects you",
      "point1": "Built on Rust's trusted RSA library",
      "point2": "Regular security audits and deep testing",
      "point3": "Memory safety to prevent leaks",
      "point4": "Protection against timing attacks"
    },
    "reminders": {
      "title": "Security reminders",
      "point1": "Never store private keys in plain text",
      "point2": "Use strong key sizes (2048 bits or more recommended)",
      "point3": "Protect your private keys with a strong password",
      "point4": "Never share your private keys"
    },
    "practices": {
      "title": "Best practices",
      "point1": "Use different keys for encryption and signing",
      "point2": "Rotate your key pairs regularly",
      "point3": "Implement key rotation policies",
      "point4": "Monitor key usage",
      "point5": "Keep Vaultic up to date"
    },
    "warning": {
      "title": "Important Note",
      "content": "Vaultic uses a Rust RSA implementation. While it's secure, always follow best practices and keep your keys up to date. For highly sensitive applications, consider libraries with constant-time guarantees."
    }
  }
} 